@page "/Identity/Login"

@inject AuthenticationStateProvider authenticationStateProvider
@inject ILocalStorageService localStorageService
@inject NavigationManager navigationManager

<PageTitle>Login</PageTitle>

<h1>Login</h1>

<EditForm Model="loginDto" OnValidSubmit="OnLoginFormSubmitAsync">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <label class="form-label d-block">
        Email: 
        <InputText name="email" class="form-control" @bind-Value=loginDto.Email></InputText>
    </label>

    <label class="form-label d-block">
        Password: 
        <InputText name="password" class="form-control" type="password" @bind-Value=loginDto.Password></InputText>
    </label>

    <button class="btn btn-primary">Login</button>
</EditForm>

@code {
    public class LoginDto {
        [Required]
        public string Email { get; set; }
        [Required]
        public string Password { get; set; }
    }

    public LoginDto loginDto { get; set; } = new();

    private async Task OnLoginFormSubmitAsync(EditContext editContext) 
    {
        var httpClient = new HttpClient();

        var loginResponse = await httpClient.PostAsJsonAsync("http://localhost:5149/api/Identity/Login", loginDto);

        if (loginResponse.IsSuccessStatusCode && loginResponse.StatusCode == System.Net.HttpStatusCode.OK) {
            var json = await loginResponse.Content.ReadAsStringAsync();

            var jwt = Newtonsoft.Json.JsonConvert.DeserializeObject<JwtToken>(json);

            await localStorageService.SetItemAsStringAsync("jwt_access", jwt.AccessToken);
            
            await localStorageService.SetItemAsStringAsync("jwt_refresh", jwt.RefreshToken);
            
            await authenticationStateProvider.GetAuthenticationStateAsync();

            navigationManager.NavigateTo("/");
        }
    }
}